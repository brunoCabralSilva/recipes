import { createContext } from 'react';
import { buttonsNavigationTypes } from '../interfaces';

interface RecipesContext {
  fixedList: any[],
  setFixedList: (newState: any) => void,
  buttonsNavigation: any | buttonsNavigationTypes[],
  setButtonsNavigation: (newState: any | buttonsNavigationTypes[]) => void,
  favAndSharedInItem: any[],
  setFavAndSharedInItem: (newState: any) => void,
  listOfItemsFromCat: any[],
  setListOfItemsFromCat: (newState: any) => void,
  typeOfList: string,
  setTypeOfList: (newState: string) => void,
  listFavorites: any[],
  setListFavorites: (newState: any) => void,
  messageShared: string,
  setMessageShared: (newState: any) => void,
  reqApiCategory: (category: string) => void,
  requestFoodById: (newState: any) => any,
  requestDrinkById: (newState: any) => any,
  initialRequest: () => void,
  listAllDrinks: () => void,
  listAllFoods: () => void,
  verifyIfIsFavorite: (id: string) => boolean,
  alterFavorites: (item: any) => void, 
  sharedLink: (type: string, id: string) => void,
  getFavorites: () => void,
  createElement: (type: string, id: string) => void,
  objIngrMeas: any,
  setObjIngrMeas: (numState: any) => void,
  objSelected: any,
  setObjSelected: (numState: any) => void,
  nameOfPage: string,
  setNameOfPage: (numState: string) => void,
}

const initialValue: RecipesContext = {
  fixedList: [],
  setFixedList: () => {},
  buttonsNavigation: [],
  setButtonsNavigation: () => {},
  favAndSharedInItem: [],
  setFavAndSharedInItem: () => {},
  listOfItemsFromCat: [],
  setListOfItemsFromCat: () => {},
  typeOfList: '',
  setTypeOfList: () => {},
  listFavorites: [],
  setListFavorites: () => {},
  reqApiCategory: () => {},
  requestFoodById: () => {},
  requestDrinkById: () => {},
  initialRequest: () => {},
  listAllDrinks: () => {},
  listAllFoods: () => {},
  verifyIfIsFavorite: () => { return false },
  alterFavorites: () => {},
  sharedLink: () => {},
  messageShared: '',
  setMessageShared: () => {},
  getFavorites: () => {},
  createElement: () => {},
  objIngrMeas: {},
  setObjIngrMeas: () => {},
  objSelected: {},
  setObjSelected: () => {},
  nameOfPage: '',
  setNameOfPage: () => {},
}

const contexto = createContext(initialValue);
export default contexto;

